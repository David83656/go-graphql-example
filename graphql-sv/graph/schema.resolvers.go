package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/David83656/go-dbgraphql/graphql-sv/graph/model"
)

// CrearProducto is the resolver for the crearProducto field.
func (r *mutationResolver) CrearProducto(ctx context.Context, input model.NuevoProducto) (*model.Producto, error) {
	panic(fmt.Errorf("not implemented: CrearProducto - crearProducto"))
}

// CrearCliente is the resolver for the crearCliente field.
func (r *mutationResolver) CrearCliente(ctx context.Context, input model.NuevoCliente) (*model.Cliente, error) {
	panic(fmt.Errorf("not implemented: CrearCliente - crearCliente"))
}

// Productos is the resolver for the productos field.
func (r *queryResolver) Productos(ctx context.Context) ([]*model.Producto, error) {
	panic(fmt.Errorf("not implemented: Productos - productos"))
}

// Clientes is the resolver for the clientes field.
func (r *queryResolver) Clientes(ctx context.Context) ([]*model.Cliente, error) {
	panic(fmt.Errorf("not implemented: Clientes - clientes"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
