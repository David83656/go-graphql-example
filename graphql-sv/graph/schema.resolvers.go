package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/David83656/go-dbgraphql/graphql-sv/controller"
	"github.com/David83656/go-dbgraphql/graphql-sv/graph/model"
	"github.com/google/uuid"
)

// CrearProducto is the resolver for the crearProducto field.
func (r *mutationResolver) CrearProducto(ctx context.Context, input model.NuevoProducto) (*model.Producto, error) {
	nuevoID := uuid.New().String()
	pintura := &model.Producto{
		ID:        nuevoID,
		Nombre:    input.Nombre,
		Marca:     input.Nombre,
		Categoria: input.Categoria,
		Precio:    input.Precio,
	}
	controller.SaveP(pintura)
	return pintura, nil
}

// CrearCliente is the resolver for the crearCliente field.
func (r *mutationResolver) CrearCliente(ctx context.Context, input model.NuevoCliente) (*model.Cliente, error) {
	nuevoID := uuid.New().String()

	cliente := &model.Cliente{
		ID:                nuevoID,
		Nombre:            input.Nombre,
		CorreoElectronico: input.CorreoElectronico,
	}
	controller.SaveC(cliente)
	return cliente, nil
}

// Productos is the resolver for the productos field.
func (r *queryResolver) Productos(ctx context.Context) ([]*model.Producto, error) {
	productos := controller.FindAllP()
	return productos, nil
}

// Clientes is the resolver for the clientes field.
func (r *queryResolver) Clientes(ctx context.Context) ([]*model.Cliente, error) {
	clientes := controller.FindAllC()
	return clientes, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
